    
def connect_and_reload(self, device_address):
    success = self.bluetooth_device_manager.connect_device(device_address)
    if success:
        print(f"[INFO] {device_address} connected successfully.")
        self.load_profile_tabs_for_device(device_address)
    else:
        QMessageBox.warning(self, "Connection Failed", f"Failed to connect to {device_address}.")

def load_profile_tabs_for_device(self, device_address):
    bold_font = QFont()
    bold_font.setBold(True)

    if hasattr(self, 'profile_methods_widget'):
        self.profile_methods_widget.setParent(None)

    self.device_address = device_address
    self.profile_description_text_browser.clear()
    self.profile_description_text_browser.append(f"Connected Device: {device_address}")
    self.profile_description_text_browser.setFont(bold_font)
    self.profile_description_text_browser.append("Select a profile to proceed (A2DP or OPP)")

    # Create empty tabs for A2DP and OPP
    self.device_tab_widget = QTabWidget()
    self.device_tab_widget.setMaximumWidth(600)
    self.device_tab_widget.setFont(bold_font)
    self.device_tab_widget.setStyleSheet("color: black; background-color: lightblue;")

    self.a2dp_tab_placeholder = QWidget()
    self.a2dp_tab_placeholder.setMaximumWidth(600)
    self.opp_tab_placeholder = QWidget()
    self.opp_tab_placeholder.setMaximumWidth(600)

    self.device_tab_widget.addTab(self.a2dp_tab_placeholder, "A2DP")
    self.device_tab_widget.addTab(self.opp_tab_placeholder, "OPP")

    self.device_tab_widget.currentChanged.connect(self.on_profile_tab_changed)

    # === Main layout with tabs + optional connect button ===
    self.profile_methods_layout = QVBoxLayout()
    self.profile_methods_layout.addWidget(self.device_tab_widget)

    # Show connect button if device is not connected
    if not self.bluetooth_device_manager.is_connected(device_address):
        warning_label = QLabel("ðŸ”Œ Device is not connected. Connect to enable profile controls.")
        warning_label.setFont(bold_font)
        warning_label.setStyleSheet("color: red;")
        self.profile_methods_layout.addWidget(warning_label)

        connect_button = QPushButton("Connect")
        connect_button.setFont(bold_font)
        connect_button.setStyleSheet("color: green; padding: 6px;")
        connect_button.clicked.connect(lambda: self.connect_and_reload(device_address))
        self.profile_methods_layout.addWidget(connect_button)

    self.profile_methods_widget = QWidget()
    self.profile_methods_widget.setMaximumWidth(500)
    self.profile_methods_widget.setLayout(self.profile_methods_layout)

    self.findChild(QGridLayout).addWidget(self.profile_methods_widget, 2, 2, 3, 1)

    # Trigger tab setup if already connected
    if self.bluetooth_device_manager.is_connected(device_address):
        self.on_profile_tab_changed(self.device_tab_widget.currentIndex())

So ok leave all. This I will give you my new host ui code .. Iâ€™m already adding  connected and paired devices under gap in the list of profiles if user is doing that in current session so what I want to do is .. at starup of ui only check if any devices are already connected without user clicking on pair or connect which is displayed when user clicks on gap .. and display it below gap if any devices are already connected or paired â€¦
# After: self.profiles_list_widget.addItem("GAP")
# Add already paired and connected devices below "GAP"
gap_index = self.profiles_list_widget.count() - 1

paired_devices = self.bluetooth_device_manager.get_paired_devices()
connected_devices = self.bluetooth_device_manager.get_connected_devices()

# Use a set to avoid duplicates
unique_devices = set(paired_devices.keys()).union(connected_devices.keys())

for device_address in unique_devices:
    device_item = QListWidgetItem(device_address)
    device_item.setFont(QFont("Arial", 10))
    device_item.setForeground(Qt.GlobalColor.black)
    gap_index += 1
    self.profiles_list_widget.insertItem(gap_index, device_item)
