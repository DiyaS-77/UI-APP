def update_device_buttons_state(self, device_address):
    if self.bluetooth_device_manager.is_connected(device_address):
        self.connect_button.setEnabled(False)
        self.disconnect_button.setEnabled(True)
    else:
        self.connect_button.setEnabled(True)
        self.disconnect_button.setEnabled(False)

    if self.bluetooth_device_manager.is_paired(device_address):
        self.unpair_button.setEnabled(True)
    else:
        self.unpair_button.setEnabled(False)

def load_profile_tabs_for_device(self, device_address):
    bold_font = QFont()
    bold_font.setBold(True)

    if hasattr(self, 'profile_methods_widget'):
        self.profile_methods_widget.setParent(None)

    self.device_address = device_address

    # Create profile tabs (A2DP, OPP)
    self.device_tab_widget = QTabWidget()
    self.device_tab_widget.setMaximumWidth(600)
    self.device_tab_widget.setFont(bold_font)
    self.a2dp_tab_placeholder = QWidget()
    self.opp_tab_placeholder = QWidget()
    self.device_tab_widget.addTab(self.a2dp_tab_placeholder, "A2DP")
    self.device_tab_widget.addTab(self.opp_tab_placeholder, "OPP")
    self.device_tab_widget.setStyleSheet("color: black; background-color: lightblue;")
    self.device_tab_widget.currentChanged.connect(self.on_profile_tab_changed)

    # ----- Buttons Section -----
    self.connect_button = QPushButton("Connect")
    self.disconnect_button = QPushButton("Disconnect")
    self.unpair_button = QPushButton("Unpair")

    for btn in [self.connect_button, self.disconnect_button, self.unpair_button]:
        btn.setFont(bold_font)
        btn.setFixedHeight(28)
        btn.setFixedWidth(100)

    self.connect_button.clicked.connect(lambda: self.connect_device(device_address))
    self.disconnect_button.clicked.connect(lambda: self.disconnect_device(device_address))
    self.unpair_button.clicked.connect(lambda: self.unpair_device(device_address))

    self.update_device_buttons_state(device_address)  # Enable/disable based on state

    buttons_layout = QHBoxLayout()
    buttons_layout.addStretch()
    buttons_layout.addWidget(self.connect_button)
    buttons_layout.addWidget(self.disconnect_button)
    buttons_layout.addWidget(self.unpair_button)
    buttons_layout.addStretch()

    # ----- Main layout for middle panel -----
    self.profile_methods_layout = QVBoxLayout()
    self.profile_methods_layout.addWidget(self.device_tab_widget)
    self.profile_methods_layout.addSpacing(10)
    self.profile_methods_layout.addLayout(buttons_layout)
    self.profile_methods_layout.addStretch()

    self.profile_methods_widget = QWidget()
    self.profile_methods_widget.setLayout(self.profile_methods_layout)
    self.profile_methods_widget.setMaximumWidth(600)

    self.findChild(QGridLayout).addWidget(self.profile_methods_widget, 2, 2, 3, 1)

    self.on_profile_tab_changed(self.device_tab_widget.currentIndex())

def remove_unpaired_device_from_list(self, unpaired_address):
    """
    Removes a specific unpaired device from the profiles list (if present).
    This avoids clearing the entire list and keeps all other devices intact.
    """
    for i in range(self.profiles_list_widget.count()):
        item_text = self.profiles_list_widget.item(i).text().strip()
        if item_text == unpaired_address:
            self.profiles_list_widget.takeItem(i)
            break


def refresh_gap_device_list(self):
    # Step 1: Remove all items except "GAP"
    for i in reversed(range(self.profiles_list_widget.count())):
        item_text = self.profiles_list_widget.item(i).text().strip()
        if item_text != "GAP":
            self.profiles_list_widget.takeItem(i)

    # Step 2: Re-add currently connected/paired devices
    gap_index = self.profiles_list_widget.row(self.profiles_list_widget.findItems("GAP", Qt.MatchExactly)[0])
    
    paired_devices = self.bluetooth_device_manager.get_paired_devices()
    connected_devices = self.bluetooth_device_manager.get_connected_devices()
    unique_devices = set(paired_devices.keys()).union(connected_devices.keys())

    for device_address in unique_devices:
        device_item = QListWidgetItem(device_address)
        device_item.setFont(QFont("Arial", 10))
        device_item.setForeground(Qt.GlobalColor.black)
        gap_index += 1
        self.profiles_list_widget.insertItem(gap_index, device_item)


def add_connection_controls(self, layout: QVBoxLayout, device_address: str):
    """
    Add Connect / Disconnect / Unpair buttons to the given layout.
    These buttons remain visible but enable/disable based on current device state.
    """
    bold_font = QFont()
    bold_font.setBold(True)

    button_layout = QHBoxLayout()

    is_connected = self.bluetooth_device_manager.is_connected(device_address)
    is_paired = device_address in self.bluetooth_device_manager.get_paired_devices()

    # Connect Button
    connect_button = QPushButton("Connect")
    connect_button.setFont(bold_font)
    connect_button.setStyleSheet("color: green; padding: 4px;")
    connect_button.setFixedWidth(100)
    connect_button.setEnabled(not is_connected)
    connect_button.clicked.connect(lambda: self.connect_and_reload(device_address))
    button_layout.addWidget(connect_button)

    # Disconnect Button
    disconnect_button = QPushButton("Disconnect")
    disconnect_button.setFont(bold_font)
    disconnect_button.setStyleSheet("color: red; padding: 4px;")
    disconnect_button.setFixedWidth(100)
    disconnect_button.setEnabled(is_connected)
    disconnect_button.clicked.connect(lambda: self.disconnect_and_reload(device_address))
    button_layout.addWidget(disconnect_button)

    # Unpair Button
    unpair_button = QPushButton("Unpair")
    unpair_button.setFont(bold_font)
    unpair_button.setStyleSheet("color: orange; padding: 4px;")
    unpair_button.setFixedWidth(100)
    unpair_button.setEnabled(is_paired)
    unpair_button.clicked.connect(lambda: self.unpair_and_reload(device_address))
    button_layout.addWidget(unpair_button)

    layout.addLayout(button_layout)


# At the end of load_profile_tabs_for_device()

    self.profile_methods_widget = QWidget()
    self.profile_methods_widget.setMaximumWidth(500)
    self.profile_methods_widget.setLayout(self.profile_methods_layout)

    self.findChild(QGridLayout).addWidget(self.profile_methods_widget, 2, 2, 3, 1)

    # Manually trigger tab if device is connected
    if self.bluetooth_device_manager.is_connected(device_address):
        self.on_profile_tab_changed(self.device_tab_widget.currentIndex())

    # âœ… Add connect/disconnect/unpair control buttons
    self.add_connection_controls(self.profile_methods_layout, device_address)

def connect_and_reload(self, device_address):
    success = self.bluetooth_device_manager.connect_device(device_address)
    if success:
        print(f"[INFO] Connected to {device_address}")
    else:
        QMessageBox.warning(self, "Connection Failed", f"Could not connect to {device_address}")
    self.load_profile_tabs_for_device(device_address)

def disconnect_and_reload(self, device_address):
    success = self.bluetooth_device_manager.disconnect_device(device_address)
    if success:
        print(f"[INFO] Disconnected from {device_address}")
    else:
        QMessageBox.warning(self, "Disconnection Failed", f"Could not disconnect from {device_address}")
    self.load_profile_tabs_for_device(device_address)

def unpair_and_reload(self, device_address):
    success = self.bluetooth_device_manager.unpair_device(device_address)
    if success:
        print(f"[INFO] Unpaired {device_address}")
    else:
        QMessageBox.warning(self, "Unpair Failed", f"Could not unpair {device_address}")
    self.load_profile_tabs_for_device(device_address)


