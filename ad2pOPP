def load_profile_tabs_for_device(self, device_address):
    bold_font = QFont()
    bold_font.setBold(True)

    # Clear any previous profile method widget
    if hasattr(self, 'profile_methods_widget'):
        self.profile_methods_widget.setParent(None)

    self.device_address = device_address
    self.profile_description_text_browser.clear()
    self.profile_description_text_browser.append(f"Connected Device: {device_address}")
    self.profile_description_text_browser.setFont(bold_font)
    self.profile_description_text_browser.append("Select a profile to proceed (A2DP or OPP)")

    # Profile tab widget
    self.device_tab_widget = QTabWidget()
    self.device_tab_widget.setFont(bold_font)
    self.device_tab_widget.setStyleSheet("color: black; background-color: lightblue;")

    self.a2dp_tab_placeholder = QWidget()
    self.opp_tab_placeholder = QWidget()

    self.device_tab_widget.addTab(self.a2dp_tab_placeholder, "A2DP")
    self.device_tab_widget.addTab(self.opp_tab_placeholder, "OPP")
    self.device_tab_widget.currentChanged.connect(self.on_profile_tab_changed)

    self.profile_methods_layout = QHBoxLayout()
    self.profile_methods_layout.setContentsMargins(10, 0, 10, 0)
    self.profile_methods_layout.addWidget(self.device_tab_widget)

    self.profile_methods_widget = QWidget()
    self.profile_methods_widget.setLayout(self.profile_methods_layout)

    # Add to the full central area
    self.findChild(QGridLayout).addWidget(self.profile_methods_widget, 2, 0, 6, 4)

    self.on_profile_tab_changed(self.device_tab_widget.currentIndex())
def profile_selected(self):
    selected_items = self.profiles_list_widget.selectedItems()
    if not selected_items:
        return

    selected_text = selected_items[0].text().strip()

    if selected_text == "GAP":
        self.load_gap_ui()
    elif self.is_valid_bd_address(selected_text):
        self.load_profile_tabs_for_device(selected_text)

def load_gap_ui(self):
    if hasattr(self, 'profile_methods_widget'):
        self.profile_methods_widget.setParent(None)

    gap_methods_widget = QWidget()
    gap_methods_widget.setLayout(self.gap_methods_layout)

    self.profile_methods_layout = QHBoxLayout()
    self.profile_methods_layout.addWidget(gap_methods_widget)

    self.profile_methods_widget = QWidget()
    self.profile_methods_widget.setLayout(self.profile_methods_layout)

    self.findChild(QGridLayout).addWidget(self.profile_methods_widget, 2, 2, 3, 1)


def test_application_clicked(self):
    """
    Create and display the main testing application GUI.

    This interface consists of:
    - A profile selection list
    - Bluetooth controller details
    - A dynamic area for profile-specific UI (e.g., GAP, A2DP)
    - Three log viewers: Bluetoothd, PulseAudio, and HCI Dump
    - A back button to return to the previous window
    """
    bold_font = QFont()
    bold_font.setBold(True)

    self.main_grid_layout = QGridLayout()

    # ==== Left Panel: Profile List ====
    self.profiles_list_widget = QListWidget()
    self.profiles_list_widget.addItem("GAP")
    self.profiles_list_widget.setFont(bold_font)
    self.profiles_list_widget.setFixedWidth(350)
    self.profiles_list_widget.setStyleSheet("border: 2px solid black; background: transparent; color: black;")

    profiles_list_label = QLabel("List of Profiles:")
    profiles_list_label.setFont(bold_font)
    self.main_grid_layout.addWidget(profiles_list_label, 0, 0)
    self.main_grid_layout.addWidget(self.profiles_list_widget, 1, 0, 2, 2)

    self.profiles_list_widget.itemSelectionChanged.connect(self.profile_selected)

    # ==== Left Bottom Panel: Controller Info ====
    controller_widget = QWidget()
    controller_layout = QVBoxLayout()
    controller_widget.setLayout(controller_layout)
    controller_widget.setFixedWidth(350)
    controller_widget.setStyleSheet("border: 2px solid black; background: transparent; color: black;")

    self.bluez_logger.get_controller_details(interface=self.interface)

    info_fields = [
        ("Controller Name:", self.bluez_logger.name),
        ("Controller Address:", self.bluez_logger.bd_address),
        ("Link Mode:", self.bluez_logger.link_mode),
        ("Link Policy:", self.bluez_logger.link_policy),
        ("HCI Version:", self.bluez_logger.hci_version),
        ("LMP Version:", self.bluez_logger.lmp_version),
        ("Manufacturer:", self.bluez_logger.manufacturer)
    ]

    label = QLabel("Controller Details:")
    label.setFont(bold_font)
    controller_layout.addWidget(label)

    for title, value in info_fields:
        layout = QHBoxLayout()
        label = QLabel(title)
        label.setFont(bold_font)
        value_label = QLabel(value)
        layout.addWidget(label)
        layout.addWidget(value_label)
        controller_layout.addLayout(layout)

    self.main_grid_layout.addWidget(controller_widget, 3, 0, 8, 2)

    # ==== Middle Panel: Dynamic Profile UI ====
    self.profile_methods_layout = QVBoxLayout()
    self.profile_methods_widget = QWidget()
    self.profile_methods_widget.setLayout(self.profile_methods_layout)
    self.profile_methods_widget.setStyleSheet("border: 2px solid black; background-color: white;")
    self.main_grid_layout.addWidget(self.profile_methods_widget, 1, 2, 10, 2)

    # ==== Right Panel: Logs ====
    dump_logs_label = QLabel("Dump Logs:")
    dump_logs_label.setFont(bold_font)
    dump_logs_label.setStyleSheet("color: black;")
    self.main_grid_layout.addWidget(dump_logs_label, 0, 4)

    self.dump_logs_text_browser = QTabWidget()
    self.dump_logs_text_browser.setStyleSheet("border: 2px solid black; color: black; background-color: lightblue;")
    self.dump_logs_text_browser.setFixedWidth(400)
    self.main_grid_layout.addWidget(self.dump_logs_text_browser, 1, 4, 10, 2)

    self.bluetoothd_log_text_browser = QTextEdit()
    self.pulseaudio_log_text_browser = QTextEdit()
    self.hci_dump_log_text_browser = QTextEdit()

    for browser in [self.bluetoothd_log_text_browser, self.pulseaudio_log_text_browser, self.hci_dump_log_text_browser]:
        browser.setFont(bold_font)
        browser.setReadOnly(True)

    self.dump_logs_text_browser.addTab(self.bluetoothd_log_text_browser, "Bluetoothd_Logs")
    self.dump_logs_text_browser.addTab(self.pulseaudio_log_text_browser, "Pulseaudio_Logs")
    self.dump_logs_text_browser.addTab(self.hci_dump_log_text_browser, "HCI_Dump_Logs")

    # Start logs (you can make this async if needed)
    self.bluez_logger.start_bluetoothd_logs(self.bluetoothd_log_text_browser)
    self.bluez_logger.start_pulseaudio_logs(self.pulseaudio_log_text_browser)
    self.bluez_logger.start_dump_logs(interface=self.interface, log_text_browser=self.hci_dump_log_text_browser)

    # ==== Bottom Back Button ====
    back_button = QPushButton("Back")
    back_button.setFont(bold_font)
    back_button.setStyleSheet("padding: 6px; font-size: 16px;")
    back_button.clicked.connect(self.back_callback)

    back_layout = QHBoxLayout()
    back_layout.addWidget(back_button)
    back_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)

    self.main_grid_layout.addLayout(back_layout, 11, 0, 1, 1)

    self.setLayout(self.main_grid_layout)