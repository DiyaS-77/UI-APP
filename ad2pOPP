def add_connection_controls(self, layout: QVBoxLayout, device_address: str):
    """
    Add Connect / Disconnect / Unpair buttons to the given layout.
    These buttons remain visible but enable/disable based on current device state.
    """
    bold_font = QFont()
    bold_font.setBold(True)

    button_layout = QHBoxLayout()

    is_connected = self.bluetooth_device_manager.is_connected(device_address)
    is_paired = device_address in self.bluetooth_device_manager.get_paired_devices()

    # Connect Button
    connect_button = QPushButton("Connect")
    connect_button.setFont(bold_font)
    connect_button.setStyleSheet("color: green; padding: 4px;")
    connect_button.setFixedWidth(100)
    connect_button.setEnabled(not is_connected)
    connect_button.clicked.connect(lambda: self.connect_and_reload(device_address))
    button_layout.addWidget(connect_button)

    # Disconnect Button
    disconnect_button = QPushButton("Disconnect")
    disconnect_button.setFont(bold_font)
    disconnect_button.setStyleSheet("color: red; padding: 4px;")
    disconnect_button.setFixedWidth(100)
    disconnect_button.setEnabled(is_connected)
    disconnect_button.clicked.connect(lambda: self.disconnect_and_reload(device_address))
    button_layout.addWidget(disconnect_button)

    # Unpair Button
    unpair_button = QPushButton("Unpair")
    unpair_button.setFont(bold_font)
    unpair_button.setStyleSheet("color: orange; padding: 4px;")
    unpair_button.setFixedWidth(100)
    unpair_button.setEnabled(is_paired)
    unpair_button.clicked.connect(lambda: self.unpair_and_reload(device_address))
    button_layout.addWidget(unpair_button)

    layout.addLayout(button_layout)


# At the end of load_profile_tabs_for_device()

    self.profile_methods_widget = QWidget()
    self.profile_methods_widget.setMaximumWidth(500)
    self.profile_methods_widget.setLayout(self.profile_methods_layout)

    self.findChild(QGridLayout).addWidget(self.profile_methods_widget, 2, 2, 3, 1)

    # Manually trigger tab if device is connected
    if self.bluetooth_device_manager.is_connected(device_address):
        self.on_profile_tab_changed(self.device_tab_widget.currentIndex())

    # âœ… Add connect/disconnect/unpair control buttons
    self.add_connection_controls(self.profile_methods_layout, device_address)

def connect_and_reload(self, device_address):
    success = self.bluetooth_device_manager.connect_device(device_address)
    if success:
        print(f"[INFO] Connected to {device_address}")
    else:
        QMessageBox.warning(self, "Connection Failed", f"Could not connect to {device_address}")
    self.load_profile_tabs_for_device(device_address)

def disconnect_and_reload(self, device_address):
    success = self.bluetooth_device_manager.disconnect_device(device_address)
    if success:
        print(f"[INFO] Disconnected from {device_address}")
    else:
        QMessageBox.warning(self, "Disconnection Failed", f"Could not disconnect from {device_address}")
    self.load_profile_tabs_for_device(device_address)

def unpair_and_reload(self, device_address):
    success = self.bluetooth_device_manager.unpair_device(device_address)
    if success:
        print(f"[INFO] Unpaired {device_address}")
    else:
        QMessageBox.warning(self, "Unpair Failed", f"Could not unpair {device_address}")
    self.load_profile_tabs_for_device(device_address)


