---new ui changes made at 10:59----
def profile_selected(self):
    """
    Handles selection from the list: either GAP or a device address.
    Shows the corresponding UI for GAP or A2DP (with tabs).
    """
    selected_text = self.profiles_list_widget.currentItem().text().strip()

    # Clear profile methods layout
    for i in reversed(range(self.profile_methods_layout.count())):
        item = self.profile_methods_layout.itemAt(i)
        if item.widget():
            item.widget().deleteLater()

    bold_font = QFont()
    bold_font.setBold(True)

    # GAP Selected
    if selected_text == "GAP":
        self.show_gap_ui()
        return

    # Device selected
    if self.is_valid_bd_address(selected_text):
        device_address = selected_text
        self.device_address_source = device_address
        self.device_address_sink = device_address

        self.a2dp_tab_widget = QTabWidget()
        self.a2dp_tab_widget.setFont(bold_font)
        self.a2dp_tab_widget.setStyleSheet("color: black;")

        role = self.get_a2dp_role_for_device(device_address)

        if role == "sink":
            self.a2dp_tab_widget.addTab(QWidget(), "A2DP Sink")
        elif role == "source":
            self.a2dp_tab_widget.addTab(QWidget(), "A2DP Source")
        elif role == "both":
            self.a2dp_tab_widget.addTab(QWidget(), "A2DP Sink")
            self.a2dp_tab_widget.addTab(QWidget(), "A2DP Source")
        else:
            warning = QLabel("⚠️ No A2DP role detected.")
            warning.setFont(bold_font)
            self.profile_methods_layout.addWidget(warning)
            return

        self.a2dp_tab_widget.currentChanged.connect(self.on_profile_tab_changed)
        self.profile_methods_layout.addWidget(self.a2dp_tab_widget)



def test_application_clicked(self):
    """
    Set up the main UI layout for the test application.
    """
    self.main_grid_layout = QGridLayout()

    bold_font = QFont()
    bold_font.setBold(True)

    # Left Column: Profile List
    profiles_list_label = QLabel("List of Profiles:")
    profiles_list_label.setFont(bold_font)
    profiles_list_label.setStyleSheet("color:black")
    self.main_grid_layout.addWidget(profiles_list_label, 0, 0)

    self.profiles_list_widget = QListWidget()
    self.profiles_list_widget.addItem("GAP")
    self.profiles_list_widget.setFont(bold_font)
    self.profiles_list_widget.setStyleSheet("border: 2px solid black; background-color: white;")
    self.profiles_list_widget.itemSelectionChanged.connect(self.profile_selected)
    self.profiles_list_widget.setFixedWidth(300)
    self.main_grid_layout.addWidget(self.profiles_list_widget, 1, 0, 10, 1)

    # Left Column Below: Controller Details
    controller_details_label = QLabel("Controller Details:")
    controller_details_label.setFont(bold_font)
    self.main_grid_layout.addWidget(controller_details_label, 11, 0)

    self.bluez_logger.get_controller_details(interface=self.interface)
    self.controller.name = self.bluez_logger.name
    self.controller.bd_address = self.bluez_logger.bd_address
    self.controller.link_policy = self.bluez_logger.link_policy
    self.controller.lmp_version = self.bluez_logger.lmp_version
    self.controller.link_mode = self.bluez_logger.link_mode
    self.controller.hci_version = self.bluez_logger.hci_version
    self.controller.manufacturer = self.bluez_logger.manufacturer

    controller_widget = QWidget()
    controller_layout = QVBoxLayout()
    controller_layout.setContentsMargins(5, 5, 5, 5)
    controller_widget.setLayout(controller_layout)

    fields = [
        ("Controller Name:", self.controller.name),
        ("Controller Address:", self.controller.bd_address),
        ("Link Mode:", self.controller.link_mode),
        ("Link Policy:", self.controller.link_policy),
        ("HCI Version:", self.controller.hci_version),
        ("LMP Version:", self.controller.lmp_version),
        ("Manufacturer:", self.controller.manufacturer)
    ]

    for label, value in fields:
        row = QHBoxLayout()
        lbl = QLabel(label)
        lbl.setFont(bold_font)
        row.addWidget(lbl)
        val = QLabel(value)
        row.addWidget(val)
        controller_layout.addLayout(row)

    controller_widget.setStyleSheet("border: 2px solid black; background-color: white;")
    controller_widget.setFixedWidth(300)
    self.main_grid_layout.addWidget(controller_widget, 12, 0, 4, 1)

    # Center Column: Profile Methods Area
    self.profile_methods_label = QLabel("Profile Methods or Procedures:")
    self.profile_methods_label.setFont(bold_font)
    self.profile_methods_label.setStyleSheet("color: black;")
    self.main_grid_layout.addWidget(self.profile_methods_label, 0, 1, 1, 2)

    self.profile_methods_layout = QVBoxLayout()
    self.profile_methods_widget = QWidget()
    self.profile_methods_widget.setLayout(self.profile_methods_layout)
    self.profile_methods_widget.setStyleSheet("border: 2px solid black; background-color: #d3d3d3;")
    self.main_grid_layout.addWidget(self.profile_methods_widget, 1, 1, 15, 2)

    # Right Column: Dump Logs
    logs_label = QLabel("Dump Logs:")
    logs_label.setFont(bold_font)
    self.main_grid_layout.addWidget(logs_label, 0, 3)

    self.dump_logs_text_browser = QTabWidget()
    self.dump_logs_text_browser.setStyleSheet("border: 2px solid black; background-color: white;")
    self.dump_logs_text_browser.setFixedWidth(400)
    self.main_grid_layout.addWidget(self.dump_logs_text_browser, 1, 3, 15, 1)

    self.bluetoothd_log_text_browser = QTextEdit()
    self.pulseaudio_log_text_browser = QTextEdit()
    self.hci_dump_log_text_browser = QTextEdit()

    for browser in [self.bluetoothd_log_text_browser, self.pulseaudio_log_text_browser, self.hci_dump_log_text_browser]:
        browser.setFont(bold_font)
        browser.setReadOnly(True)

    self.dump_logs_text_browser.addTab(self.bluetoothd_log_text_browser, "Bluetoothd_Logs")
    self.dump_logs_text_browser.addTab(self.pulseaudio_log_text_browser, "Pulseaudio_Logs")
    self.dump_logs_text_browser.addTab(self.hci_dump_log_text_browser, "HCI_Dump_Logs")

    self.bluez_logger.start_bluetoothd_logs(self.bluetoothd_log_text_browser)
    self.bluez_logger.start_pulseaudio_logs(self.pulseaudio_log_text_browser)
    self.bluez_logger.start_dump_logs(interface=self.interface, log_text_browser=self.hci_dump_log_text_browser)

    # Back Button
    back_button = QPushButton("Back")
    back_button.setStyleSheet("font-size: 16px; padding: 6px;")
    back_button.clicked.connect(self.back_callback)
    back_button_layout = QHBoxLayout()
    back_button_layout.addWidget(back_button)
    back_button_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)
    self.main_grid_layout.addLayout(back_button_layout, 16, 0, 1, 1)

    self.setLayout(self.main_grid_layout)




----aDDING PAIRED/Connected device ---------------------------------------
import re

def is_valid_bd_address(self, address):
    """
    Checks if the provided string is a valid Bluetooth MAC address.
    Args:
        address (str): The MAC address string to validate.
    Returns:
        bool: True if valid, False otherwise.
    """
    pattern = r"^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$"
    return re.match(pattern, address) is not None

 add_device(self, device_address):
    """
    Adds a device address below the GAP item in the profile list if not already present.
    Args:
        device_address (str): The paired/connected device MAC address (e.g., 20:32:C6:7B:91:1C)
    """
    # Find GAP index
    for i in range(self.profiles_list_widget.count()):
        if self.profiles_list_widget.item(i).text().strip() == "GAP":
            gap_index = i
            break
    else:
        return  # GAP not found

    # Check if device is already added
    for i in range(self.profiles_list_widget.count()):
        if self.profiles_list_widget.item(i).text().strip() == device_address:
            return  # Already added

    # Add device address as a new list item
    device_item = QListWidgetItem(device_address)
    device_item.setFont(QFont("Arial", 10))
    device_item.setForeground(Qt.GlobalColor.black)

    self.profiles_list_widget.insertItem(gap_index + 1, device_item)




----------------PROFILE SELECTED FROM PROFILES LIST-----------------------------

def profile_selected(self):
    """
    Handles profile or device selection from the list.
    Dynamically shows GAP methods or A2DP role-based tabs.
    """
    selected_text = self.profiles_list_widget.currentItem().text().strip()
    bold_font = QFont()
    bold_font.setBold(True)

    # Clear dynamic widget layout
    for i in reversed(range(self.profile_methods_layout.count())):
        item = self.profile_methods_layout.itemAt(i)
        if item.widget():
            item.widget().deleteLater()

    # Case 1: GAP selected
    if selected_text == "GAP":
        self.profile_description_text_browser.clear()
        self.profile_description_text_browser.setFont(bold_font)
        self.profile_description_text_browser.append("GAP Profile Selected")
        self.profile_description_text_browser.append("Use the below methods as required:")
        self.show_gap_ui()
        return

    # Case 2: Device (MAC address) selected
    if self.is_valid_bd_address(selected_text):
        device_address = selected_text
        self.device_address_source = device_address
        self.device_address_sink = device_address

        self.profile_description_text_browser.clear()
        self.profile_description_text_browser.setFont(bold_font)
        self.profile_description_text_browser.append(f"Device: {device_address}")
        self.profile_description_text_browser.append("Supported Profiles: A2DP")

        self.a2dp_tab_widget = QTabWidget()
        self.a2dp_tab_widget.setFont(bold_font)
        self.a2dp_tab_widget.setStyleSheet("color:black;")

        role = self.get_a2dp_role_for_device(device_address)

        if role == "sink":
            self.a2dp_tab_widget.addTab(QWidget(), "A2DP Source")
        elif role == "source":
            self.a2dp_tab_widget.addTab(QWidget(), "A2DP Sink")
        elif role == "both":
            self.a2dp_tab_widget.addTab(QWidget(), "A2DP Source")
            self.a2dp_tab_widget.addTab(QWidget(), "A2DP Sink")
        else:
            self.profile_description_text_browser.append("⚠️ No A2DP role detected.")
            return

        self.a2dp_tab_widget.currentChanged.connect(self.on_profile_tab_changed)
        self.profile_methods_layout.addWidget(self.a2dp_tab_widget)

-----------------GAP UIIIIIIIIIIIIIII=----------------------------------------
def show_gap_ui(self):
    """
    Displays the GAP profile UI with Discoverable and Inquiry controls.
    """
    bold_font = QFont()
    bold_font.setBold(True)

    self.gap_methods_layout = QVBoxLayout()

    # Discoverable Section
    set_discoverable_label = QLabel("SetDiscoverable:")
    set_discoverable_label.setFont(bold_font)
    set_discoverable_label.setStyleSheet("color:black")
    self.gap_methods_layout.addWidget(set_discoverable_label)

    set_discoverable_timeout_layout = QHBoxLayout()
    timeout_label = QLabel("SetDiscoverable Timeout:")
    timeout_label.setFont(bold_font)
    timeout_label.setStyleSheet("color:blue;")
    set_discoverable_timeout_layout.addWidget(timeout_label)
    self.discoverable_timeout_input = QLineEdit("0")
    set_discoverable_timeout_layout.addWidget(self.discoverable_timeout_input)
    self.gap_methods_layout.addLayout(set_discoverable_timeout_layout)

    discoverable_buttons_layout = QHBoxLayout()
    self.set_discoverable_on_button = QPushButton("ON")
    self.set_discoverable_on_button.setFont(bold_font)
    self.set_discoverable_on_button.setStyleSheet("color:green;")
    self.set_discoverable_on_button.clicked.connect(self.set_discoverable_on)
    discoverable_buttons_layout.addWidget(self.set_discoverable_on_button)

    self.set_discoverable_off_button = QPushButton("OFF")
    self.set_discoverable_off_button.setFont(bold_font)
    self.set_discoverable_off_button.setStyleSheet("color:red;")
    self.set_discoverable_off_button.clicked.connect(self.set_discoverable_off)
    self.set_discoverable_on_button.setEnabled(True)
    self.set_discoverable_off_button.setEnabled(False)
    discoverable_buttons_layout.addWidget(self.set_discoverable_off_button)
    self.gap_methods_layout.addLayout(discoverable_buttons_layout)

    refresh_button_layout_discoverable = QVBoxLayout()
    self.refresh_button_discoverable = QPushButton("REFRESH")
    self.refresh_button_discoverable.setEnabled(True)
    self.refresh_button_discoverable.clicked.connect(self.refresh_discoverable)
    self.refresh_button_discoverable.setFont(bold_font)
    self.refresh_button_discoverable.setStyleSheet("color:green;")
    refresh_button_layout_discoverable.addWidget(self.refresh_button_discoverable)
    self.gap_methods_layout.addLayout(refresh_button_layout_discoverable)

    # Inquiry Section
    inquiry_label = QLabel("Inquiry:")
    inquiry_label.setFont(bold_font)
    inquiry_label.setStyleSheet("color:black")
    self.gap_methods_layout.addWidget(inquiry_label)

    inquiry_timeout_layout = QHBoxLayout()
    inquiry_timeout_label = QLabel("Inquiry Timeout:")
    inquiry_timeout_label.setFont(bold_font)
    inquiry_timeout_label.setStyleSheet("color:blue;")
    inquiry_timeout_layout.addWidget(inquiry_timeout_label)
    self.inquiry_timeout_input = QLineEdit("0")
    inquiry_timeout_layout.addWidget(self.inquiry_timeout_input)
    self.gap_methods_layout.addLayout(inquiry_timeout_layout)

    discovery_buttons_layout = QHBoxLayout()
    self.set_discovery_on_button = QPushButton("START")
    self.set_discovery_on_button.setFont(bold_font)
    self.set_discovery_on_button.setStyleSheet("color:green;")
    self.set_discovery_on_button.clicked.connect(self.set_discovery_on)
    discovery_buttons_layout.addWidget(self.set_discovery_on_button)

    self.set_discovery_off_button = QPushButton("STOP")
    self.set_discovery_off_button.setFont(bold_font)
    self.set_discovery_off_button.setStyleSheet("color:red;")
    self.set_discovery_off_button.clicked.connect(self.set_discovery_off)
    self.set_discovery_off_button.setEnabled(False)
    discovery_buttons_layout.addWidget(self.set_discovery_off_button)
    self.gap_methods_layout.addLayout(discovery_buttons_layout)

    refresh_button_layout = QVBoxLayout()
    self.refresh_button = QPushButton("REFRESH")
    self.refresh_button.setFont(bold_font)
    self.refresh_button.setStyleSheet("color:green;")
    self.refresh_button.clicked.connect(self.refresh)
    refresh_button_layout.addWidget(self.refresh_button)
    self.gap_methods_layout.addLayout(refresh_button_layout)

    # Set final layout
    gap_methods_widget = QWidget()
    gap_methods_widget.setLayout(self.gap_methods_layout)
    self.profile_methods_layout.addWidget(gap_methods_widget)

---------Which profile is selected from the tabsssssss-------------------------------------
def on_profile_tab_changed(self, index):
    tab_text = self.a2dp_tab_widget.tabText(index)
    current_widget = self.a2dp_tab_widget.widget(index)

    if current_widget.layout():
        return

    if tab_text == "A2DP Source":
        widget = self.build_a2dp_source_tab(self.device_address_source)
    elif tab_text == "A2DP Sink":
        widget = self.build_a2dp_sink_tab(self.device_address_sink)
    else:
        return

    layout = QVBoxLayout()
    layout.addWidget(widget)
    current_widget.setLayout(layout)



_____GETTING SOURCE OR SINK ROLE FOR A@2DP-------------------

def get_a2dp_role_for_device(self, device_address):
    sinks = self.a2dp_manager.get_connected_a2dp_sink_devices()
    sources = self.a2dp_manager.get_connected_a2dp_source_devices()

    if device_address in sinks and device_address in sources:
        return "both"
    elif device_address in sinks:
        return "sink"
    elif device_address in sources:
        return "source"
    return None

------TEST APPLICTION CLICKED-----------------------------

def test_application_clicked(self):
    """
       Create and display the main testing application GUI.

       This interface consists of:
       - A profile selection list
       - Bluetooth controller details
       - A dynamic area for profile-specific UI (e.g., GAP, A2DP)
       - Three log viewers: Bluetoothd, PulseAudio, and HCI Dump
       - A back button to return to the previous window

       args: None
       returns: None
    """

    # Create the main grid
    self.main_grid_layout = QGridLayout()

    # Grid 1 Up : List of Profiles
    bold_font = QFont()
    bold_font.setBold(True)
    self.profiles_list_widget = QListWidget()
    profiles_list_label = QLabel("List of Profiles:")
    profiles_list_label.setFont(bold_font)
    profiles_list_label.setStyleSheet("color:black")
    self.main_grid_layout.addWidget(profiles_list_label, 0, 0)
    self.profiles_list_widget.addItem("GAP")
    self.profiles_list_widget.setFont(bold_font)
    self.profiles_list_widget.setStyleSheet("border: 3px solid black;color: black;background: transparent;")
    self.profiles_list_widget.itemSelectionChanged.connect(self.profile_selected)
    self.profiles_list_widget.setFixedWidth(350)
    self.main_grid_layout.addWidget(self.profiles_list_widget, 1, 0, 2, 2)

    # Grid 1 Down : Controller Details
    controller_details_widget = QWidget()
    controller_details_layout = QVBoxLayout()
    controller_details_widget.setStyleSheet("border: 2px solid black;color: black;background: transparent;")
    controller_details_widget.setFont(bold_font)
    self.main_grid_layout.addWidget(controller_details_widget, 3, 0, 8, 2)
    controller_details_layout.setContentsMargins(0, 0, 0, 0)
    controller_details_layout.setSpacing(0)

    self.bluez_logger.get_controller_details(interface=self.interface)

    self.controller.name = self.bluez_logger.name
    self.controller.bd_address = self.bluez_logger.bd_address
    self.controller.link_policy = self.bluez_logger.link_policy
    self.controller.lmp_version = self.bluez_logger.lmp_version
    self.controller.link_mode = self.bluez_logger.link_mode
    self.controller.hci_version = self.bluez_logger.hci_version
    self.controller.manufacturer = self.bluez_logger.manufacturer

    controller_details_label = QLabel("Controller Details:")
    controller_details_label.setFont(bold_font)
    controller_details_layout.addWidget(controller_details_label)

    # Controller Info Fields
    info_fields = [
        ("Controller Name:", self.controller.name),
        ("Controller Address:", self.controller.bd_address),
        ("Link Mode:", self.controller.link_mode),
        ("Link Policy:", self.controller.link_policy),
        ("HCI Version:", self.controller.hci_version),
        ("LMP Version:", self.controller.lmp_version),
        ("Manufacturer:", self.controller.manufacturer)
    ]

    for label, value in info_fields:
        layout = QHBoxLayout()
        lbl = QLabel(label)
        lbl.setFont(bold_font)
        layout.addWidget(lbl)
        val = QLabel(value)
        layout.addWidget(val)
        controller_details_layout.addLayout(layout)

    controller_details_widget.setLayout(controller_details_layout)
    controller_details_widget.setFixedWidth(350)

    # Profile UI Placeholder (for GAP/A2DP tabs)
    self.profile_methods_layout = QHBoxLayout()
    self.profile_methods_widget = QWidget()
    self.profile_methods_widget.setLayout(self.profile_methods_layout)
    self.main_grid_layout.addWidget(self.profile_methods_widget, 2, 2, 8, 2)

    # Grid3: HCI Dump Logs
    dump_logs_label = QLabel("Dump Logs:")
    dump_logs_label.setFont(bold_font)
    dump_logs_label.setStyleSheet("color: black;")
    self.main_grid_layout.addWidget(dump_logs_label, 0, 4)
    self.dump_logs_text_browser = QTabWidget()
    self.main_grid_layout.addWidget(self.dump_logs_text_browser, 1, 4, 10, 2)
    self.dump_logs_text_browser.setStyleSheet("border: 2px solid black;color: black; background-color: lightblue;")
    self.dump_logs_text_browser.setFixedWidth(400)

    self.bluetoothd_log_text_browser = QTextEdit()
    self.bluetoothd_log_text_browser.setFont(bold_font)
    self.bluetoothd_log_text_browser.setReadOnly(True)

    self.pulseaudio_log_text_browser = QTextEdit()
    self.pulseaudio_log_text_browser.setFont(bold_font)
    self.pulseaudio_log_text_browser.setReadOnly(True)

    self.hci_dump_log_text_browser = QTextEdit()
    self.hci_dump_log_text_browser.setFont(bold_font)
    self.hci_dump_log_text_browser.setReadOnly(True)

    self.dump_logs_text_browser.addTab(self.bluetoothd_log_text_browser, "Bluetoothd_Logs")
    self.dump_logs_text_browser.addTab(self.pulseaudio_log_text_browser, "Pulseaudio_Logs")
    self.dump_logs_text_browser.addTab(self.hci_dump_log_text_browser, "HCI_Dump_Logs")

    self.bluez_logger.start_bluetoothd_logs(self.bluetoothd_log_text_browser)
    self.bluez_logger.start_pulseaudio_logs(self.pulseaudio_log_text_browser)
    self.bluez_logger.start_dump_logs(interface=self.interface, log_text_browser=self.hci_dump_log_text_browser)

    # Back Button
    back_button = QPushButton("Back")
    back_button.setStyleSheet("font-size: 16px; padding: 6px;")
    back_button.clicked.connect(self.back_callback)
    back_button_layout = QHBoxLayout()
    back_button_layout.addWidget(back_button)
    back_button_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)
    self.main_grid_layout.addLayout(back_button_layout, 11, 0, 1, 1)

    self.setLayout(self.main_grid_layout)



------------A2DP METHODS=======================
    def start_streaming(self):
        audio_path = self.audio_location_input.text().strip()
        if not audio_path or not os.path.exists(audio_path):
            QMessageBox.warning(self, "Invalid Audio File", "Please select a valid audio file to stream.")
            return

        if not self.device_address_source:
            QMessageBox.warning(self, "No Device", "Device address not available for streaming.")
            return

        print(f"A2DP streaming started with file: {audio_path} on device: {self.device_address_source}")

        self.start_streaming_button.setEnabled(False)
        self.stop_streaming_button.setEnabled(True)

        success = self.a2dp_manager.start_streaming(self.device_address_source, audio_path)

        if not success:
            QMessageBox.critical(self, "Streaming Failed", "Failed to start streaming.")
            self.start_streaming_button.setEnabled(True)
            self.stop_streaming_button.setEnabled(False)

    def stop_streaming(self):
        print("A2DP streaming stopped")
        self.start_streaming_button.setEnabled(True)
        self.stop_streaming_button.setEnabled(False)
        self.a2dp_manager.stop_streaming()
        if hasattr(self, 'streaming_timer'):
            self.streaming_timer.stop()

    def play(self):
        print("Play button has been pressed")
        if self.device_address_sink:
            self.a2dp_manager.play(self.device_address_sink)
        else:
            QMessageBox.warning(self, "No Device", "Sink device address not available.")

    def pause(self):
        print("Pause button has been pressed")
        if self.device_address_sink:
            self.a2dp_manager.pause(self.device_address_sink)
        else:
            QMessageBox.warning(self, "No Device", "Sink device address not available.")

    def next(self):
        print("Next button pressed")
        if self.device_address_sink:
            self.a2dp_manager.next(self.device_address_sink)
        else:
            QMessageBox.warning(self, "No Device", "Sink device address not available.")

    def previous(self):
        print("Previous button pressed")
        if self.device_address_sink:
            self.a2dp_manager.previous(self.device_address_sink)
        else:
            QMessageBox.warning(self, "No Device", "Sink device address not available.")

    def rewind(self):
        print("Rewind button pressed")
        if self.device_address_sink:
            self.a2dp_manager.rewind(self.device_address_sink)
        else:
            QMessageBox.warning(self, "No Device", "Sink device address not available.")

    def browse_audio_file(self):
        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(None, "Select Audio File", "", "Audio Files (*.mp3 *.wav *.ogg *.flac);;All Files (*)")
        if file_path:
            self.audio_location_input.setText(file_path)

    def build_a2dp_source_tab(self):
        bold_font = QFont()
        bold_font.setBold(True)

        layout = QVBoxLayout()
        label = QLabel("A2DP Streaming:")
        label.setFont(bold_font)
        layout.addWidget(label)

        # Audio file selection
        audio_layout = QHBoxLayout()
        audio_label = QLabel("Audio Location:")
        audio_label.setFont(bold_font)
        audio_layout.addWidget(audio_label)
        self.audio_location_input = QLineEdit()
        self.audio_location_input.setReadOnly(True)
        audio_layout.addWidget(self.audio_location_input)
        browse_button = QPushButton("Browse")
        browse_button.setFont(bold_font)
        browse_button.clicked.connect(self.browse_audio_file)
        audio_layout.addWidget(browse_button)
        layout.addLayout(audio_layout)

        # Start/Stop buttons
        button_layout = QHBoxLayout()
        self.start_streaming_button = QPushButton("Start Streaming")
        self.start_streaming_button.setFont(bold_font)
        self.start_streaming_button.clicked.connect(self.start_streaming)
        button_layout.addWidget(self.start_streaming_button)

        self.stop_streaming_button = QPushButton("Stop Streaming")
        self.stop_streaming_button.setFont(bold_font)
        self.stop_streaming_button.clicked.connect(self.stop_streaming)
        self.stop_streaming_button.setEnabled(False)
        button_layout.addWidget(self.stop_streaming_button)

        layout.addLayout(button_layout)

        widget = QWidget()
        widget.setLayout(layout)
        return widget

    def build_a2dp_sink_tab(self):
        bold_font = QFont()
        bold_font.setBold(True)

        layout = QVBoxLayout()
        label = QLabel("Media Control:")
        label.setFont(bold_font)
        layout.addWidget(label)

        control_buttons = QHBoxLayout()
        self.play_button = QPushButton("Play")
        self.play_button.setFont(bold_font)
        self.play_button.clicked.connect(self.play)
        control_buttons.addWidget(self.play_button)

        self.pause_button = QPushButton("Pause")
        self.pause_button.setFont(bold_font)
        self.pause_button.clicked.connect(self.pause)
        control_buttons.addWidget(self.pause_button)

        self.next_button = QPushButton("Next")
        self.next_button.setFont(bold_font)
        self.next_button.clicked.connect(self.next)
        control_buttons.addWidget(self.next_button)

        self.previous_button = QPushButton("Previous")
        self.previous_button.setFont(bold_font)
        self.previous_button.clicked.connect(self.previous)
        control_buttons.addWidget(self.previous_button)

        self.rewind_button = QPushButton("Rewind")
        self.rewind_button.setFont(bold_font)
        self.rewind_button.clicked.connect(self.rewind)
        control_buttons.addWidget(self.rewind_button)

        layout.addLayout(control_buttons)

        widget = QWidget()
        widget.setLayout(layout)
        return widget

    def on_device_selected_for_a2dp(self, device_address):
        self.device_address_source = device_address
        print(f"Selected device address for streaming: {self.device_address_source}")

    def on_device_selected_for_a2dp_sink(self, device_address):
        self.device_address_sink = device_address
        print(f"Selected sink device address for media control: {self.device_address_sink}")


